package com.example.demo.service;

import com.example.demo.model.*;
import com.example.demo.repository.*;
import com.example.demo.model.Proposal;
import com.example.demo.model.Task;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class ClientService {

    @Autowired
    private ClientRepository clientRepository;

    @Autowired
    private RequirementRepository requirementRepository;

    @Autowired
    private ProposalRepository proposalRepository;

    @Autowired
    private TaskRepository taskRepository;

    @Autowired
    private VendorFeedbackRepository vendorFeedbackRepository;

    @Autowired
    private VendorRepository vendorRepository;

    // ✅ 1. Get client by email
    public Optional<Client> getClientByEmail(String email) {
        return clientRepository.findAll().stream()
            .filter(c -> c.getUser().getEmail().equals(email))
            .findFirst();
    }

    // ✅ 2. Get all requirements by client email
    public List<Requirement> getRequirementsByClientEmail(String email) {
        return getClientByEmail(email)
                .map(requirementRepository::findByClient)
                .orElse(Collections.emptyList());
    }

    // ✅ 3. Get all proposals received by this client
    public List<Proposal> getProposalsByClientEmail(String email) {
        List<Requirement> requirements = getRequirementsByClientEmail(email);
        List<Proposal> allProposals = new ArrayList<>();

        for (Requirement req : requirements) {
            allProposals.addAll(proposalRepository.findByRequirement(req));
        }

        return allProposals;
    }

    // ✅ 4. Accept a proposal (and auto-create task)
    public String acceptProposal(int proposalId) {
        Optional<Proposal> optionalProposal = proposalRepository.findById(proposalId);

        if (optionalProposal.isPresent()) {
            Proposal proposal = optionalProposal.get();
            proposal.setStatus("accepted");
            proposalRepository.save(proposal);

            // Create new Task (basic default task)
            Task task = new Task();
            task.setProposal(proposal);
            task.setTaskName("Initial Task");
            task.setTaskDescription("Auto-created task after proposal acceptance");
            task.setStartDate(new Date());
            Calendar cal = Calendar.getInstance();
            cal.add(Calendar.DAY_OF_MONTH, 7);
            task.setEndDate(cal.getTime());

            taskRepository.save(task);

            return "Proposal accepted and task created.";
        }

        return "Proposal not found.";
    }

    // ✅ 5. Reject a proposal
    public String rejectProposal(int proposalId) {
        Optional<Proposal> optionalProposal = proposalRepository.findById(proposalId);

        if (optionalProposal.isPresent()) {
            Proposal proposal = optionalProposal.get();
            proposal.setStatus("rejected");
            proposalRepository.save(proposal);
            return "Proposal rejected.";
        }

        return "Proposal not found.";
    }

    // ✅ 6. Give Feedback to a Vendor
    public String giveVendorFeedback(int vendorId, int clientId, double rating) {
        Optional<Client> client = clientRepository.findById(clientId);
        Optional<Vendor> vendor = vendorRepository.findById(vendorId);

        if (client.isPresent() && vendor.isPresent()) {
            VendorFeedback feedback = new VendorFeedback();
            feedback.setClient(client.get());
            feedback.setVendor(vendor.get());
            feedback.setRating(rating);

            vendorFeedbackRepository.save(feedback);
            return "Feedback submitted!";
        }

        return "Client or Vendor not found.";
    }
}
