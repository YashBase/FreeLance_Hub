package com.example.demo.service;


import com.example.demo.model.Role;
import com.example.demo.model.User;
import com.example.demo.repository.RoleRepository;
import com.example.demo.repository.UserRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private RoleRepository roleRepository;

    // ‚úÖ Register a new user
    public String registerUser(User user) {

        // üîç Debug: Print role object from request
        System.out.println("Incoming user registration:");
        System.out.println("Full name: " + user.getFullName());
        System.out.println("Email: " + user.getEmail());
        System.out.println("Contact: " + user.getContact());
        System.out.println("Password: " + user.getPassword());
        System.out.println("Role object: " + user.getRole());

        if (userRepository.existsByEmail(user.getEmail())) {
            return "Email already registered!";
        }

        if (user.getRole() == null) {
            return "Role is missing in request!";
        }

        // üîç Debug: Print role name from request
        String roleName = user.getRole().getName();
        System.out.println("Role name from request: " + roleName);

        if ("Admin".equalsIgnoreCase(roleName)) {
            return "Admin registration not allowed from frontend!";
        }

        Optional<Role> roleOpt = roleRepository.findByName(roleName);

        if (!roleOpt.isPresent()) {
            return "Invalid role!";
        }

        user.setRole(roleOpt.get());
        userRepository.save(user);

        System.out.println("‚úÖ User registered successfully with role: " + roleOpt.get().getName());
        return "User registered successfully!";
    }

    // ‚úÖ Login user
    public Optional<User> loginUser(String email, String password) {
        Optional<User> user = userRepository.findByEmail(email);
        return user.filter(u -> u.getPassword().equals(password));
    }

    // ‚úÖ Get user by email
    public Optional<User> getUserByEmail(String email) {
        return userRepository.findByEmail(email);
    }
}
